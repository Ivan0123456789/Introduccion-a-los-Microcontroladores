
AVRASM ver. 2.1.30  D:\termometro\List\termometro.asm Wed Mar 20 13:25:36 2019

D:\termometro\List\termometro.asm(1093): warning: Register r4 already defined by the .DEF directive
D:\termometro\List\termometro.asm(1094): warning: Register r5 already defined by the .DEF directive
D:\termometro\List\termometro.asm(1095): warning: Register r7 already defined by the .DEF directive
D:\termometro\List\termometro.asm(1096): warning: Register r6 already defined by the .DEF directive
D:\termometro\List\termometro.asm(1097): warning: Register r9 already defined by the .DEF directive
D:\termometro\List\termometro.asm(1098): warning: Register r8 already defined by the .DEF directive
D:\termometro\List\termometro.asm(1099): warning: Register r11 already defined by the .DEF directive
D:\termometro\List\termometro.asm(1100): warning: Register r10 already defined by the .DEF directive
D:\termometro\List\termometro.asm(1101): warning: Register r13 already defined by the .DEF directive
D:\termometro\List\termometro.asm(1102): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.35 Evaluation
                 ;(C) Copyright 1998-2019 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega8535L
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 128 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 1
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8535L
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 512
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x025F
                 	.EQU __DSTACK_SIZE=0x0080
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _far=R4
                 	.DEF _far_msb=R5
                 	.DEF _cn=R7
                 	.DEF _f=R6
                 	.DEF _unidades=R9
                 	.DEF _decenas=R8
                 	.DEF _centenas=R11
                 	.DEF _uni=R10
                 	.DEF _dec=R13
                 	.DEF _cen=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c029      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
000013 cfec      	RJMP 0x00
000014 cfeb      	RJMP 0x00
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000015 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000016 0000      	.DB  0x0,0x0
                 
                 _0x3:
000017 063f
000018 4f5b
000019 6d66
00001a 077c      	.DB  0x3F,0x6,0x5B,0x4F,0x66,0x6D,0x7C,0x7
00001b 6f7f      	.DB  0x7F,0x6F
                 _0x4:
00001c 7139      	.DB  0x39,0x71
                 
                 __GLOBAL_INI_TBL:
00001d 0001      	.DW  0x01
00001e 0002      	.DW  0x02
00001f 002a      	.DW  __REG_BIT_VARS*2
                 
000020 0002      	.DW  0x02
000021 0004      	.DW  0x04
000022 002c      	.DW  __REG_VARS*2
                 
000023 000a      	.DW  0x0A
000024 00e0      	.DW  _tabla7segmentos
000025 002e      	.DW  _0x3*2
                 
000026 0002      	.DW  0x02
000027 00ea      	.DW  _letra
000028 0038      	.DW  _0x4*2
                 
                 _0xFFFFFFFF:
000029 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00002a 94f8      	CLI
00002b 27ee      	CLR  R30
00002c bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00002d e0f1      	LDI  R31,1
00002e bffb      	OUT  GICR,R31
00002f bfeb      	OUT  GICR,R30
000030 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000031 e1f8      	LDI  R31,0x18
000032 bdf1      	OUT  WDTCR,R31
000033 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000034 e08d      	LDI  R24,(14-2)+1
000035 e0a2      	LDI  R26,2
000036 27bb      	CLR  R27
                 __CLEAR_REG:
000037 93ed      	ST   X+,R30
000038 958a      	DEC  R24
000039 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00003a e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00003b e092      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00003c e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00003d 93ed      	ST   X+,R30
00003e 9701      	SBIW R24,1
00003f f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000040 e3ea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000041 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000042 9185      	LPM  R24,Z+
000043 9195      	LPM  R25,Z+
000044 9700      	SBIW R24,0
000045 f061      	BREQ __GLOBAL_INI_END
000046 91a5      	LPM  R26,Z+
000047 91b5      	LPM  R27,Z+
000048 9005      	LPM  R0,Z+
000049 9015      	LPM  R1,Z+
00004a 01bf      	MOVW R22,R30
00004b 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00004c 9005      	LPM  R0,Z+
00004d 920d      	ST   X+,R0
00004e 9701      	SBIW R24,1
00004f f7e1      	BRNE __GLOBAL_INI_LOOP
000050 01fb      	MOVW R30,R22
000051 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000052 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000053 bfed      	OUT  SPL,R30
000054 e0e2      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000055 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000056 eec0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000057 e0d0      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000058 c00e      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0xE0
                 
                 	.CSEG
                 ;#include <mega8535.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#define ADC_VREF_TYPE 0x60
                 ;
                 ;#define boton PINB.0
                 ;#define C0 PORTD.0
                 ;#define C1 PORTD.1
                 ;#define C2 PORTD.2
                 ;#define C3 PORTD.3
                 ;
                 ;const char tabla7segmentos [10]={0x3F,0x06,0x5b,0x4f,0x66,0x6d,0x7c,0x07,0x7f,0x6f};
                 
                 	.DSEG
                 ;const char letra[2]={0x39,0x71};
                 ;unsigned int far=0;
                 ;unsigned char cn;
                 ;unsigned char f;
                 ;unsigned char unidades;
                 ;unsigned char decenas;
                 ;unsigned char centenas;
                 ;unsigned char uni;
                 ;unsigned char dec;
                 ;unsigned char cen;
                 ;
                 ;bit btna;
                 ;bit btnp;
                 ;
                 ;//ADC
                 ;unsigned char read_adc(unsigned char adc_input)
                 ; 0000 001C {
                 
                 	.CSEG
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 001D 
                 ; 0000 001E ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
000059 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
00005a 81e8      	LD   R30,Y
00005b 66e0      	ORI  R30,LOW(0x60)
00005c b9e7      	OUT  0x7,R30
                 ; 0000 001F // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 0020 delay_us(10);
                +
00005d e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
00005e 958a     +DEC R24
00005f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
                 ; 0000 0021 // Start the AD conversion
                 ; 0000 0022 ADCSRA|=0x40;
000060 9a36      	SBI  0x6,6
                 ; 0000 0023 // Wait for the AD conversion to complete
                 ; 0000 0024 while ((ADCSRA & 0x10)==0);
                 _0x5:
000061 9b34      	SBIS 0x6,4
000062 cffe      	RJMP _0x5
                 ; 0000 0025 ADCSRA|=0x10;
000063 9a34      	SBI  0x6,4
                 ; 0000 0026 return ADCH;
000064 b1e5      	IN   R30,0x5
000065 9621      	ADIW R28,1
000066 9508      	RET
                 ; 0000 0027 
                 ; 0000 0028 }
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 002B {
                 _main:
                 ; .FSTART _main
                 ; 0000 002C 
                 ; 0000 002D PORTA=0x00;
000067 e0e0      	LDI  R30,LOW(0)
000068 bbeb      	OUT  0x1B,R30
                 ; 0000 002E DDRA=0x00;//todos entrada para el ADC
000069 bbea      	OUT  0x1A,R30
                 ; 0000 002F 
                 ; 0000 0030 PORTC=0x00;
00006a bbe5      	OUT  0x15,R30
                 ; 0000 0031 DDRC=0xFF;//salida hacia los display
00006b efef      	LDI  R30,LOW(255)
00006c bbe4      	OUT  0x14,R30
                 ; 0000 0032 
                 ; 0000 0033 PORTD=0x00;
00006d e0e0      	LDI  R30,LOW(0)
00006e bbe2      	OUT  0x12,R30
                 ; 0000 0034 DDRD=0xFF;//salidas hacia los transistores
00006f efef      	LDI  R30,LOW(255)
000070 bbe1      	OUT  0x11,R30
                 ; 0000 0035 
                 ; 0000 0036 PORTB=0xFF;//con pull
000071 bbe8      	OUT  0x18,R30
                 ; 0000 0037 DDRB=0x00;//push
000072 e0e0      	LDI  R30,LOW(0)
000073 bbe7      	OUT  0x17,R30
                 ; 0000 0038 
                 ; 0000 0039 
                 ; 0000 003A TCCR0=0x00;
000074 bfe3      	OUT  0x33,R30
                 ; 0000 003B TCNT0=0x00;
000075 bfe2      	OUT  0x32,R30
                 ; 0000 003C OCR0=0x00;
000076 bfec      	OUT  0x3C,R30
                 ; 0000 003D TCCR1A=0x00;
000077 bdef      	OUT  0x2F,R30
                 ; 0000 003E TCCR1B=0x00;
000078 bdee      	OUT  0x2E,R30
                 ; 0000 003F TCNT1H=0x00;
000079 bded      	OUT  0x2D,R30
                 ; 0000 0040 TCNT1L=0x00;
00007a bdec      	OUT  0x2C,R30
                 ; 0000 0041 ICR1H=0x00;
00007b bde7      	OUT  0x27,R30
                 ; 0000 0042 ICR1L=0x00;
00007c bde6      	OUT  0x26,R30
                 ; 0000 0043 OCR1AH=0x00;
00007d bdeb      	OUT  0x2B,R30
                 ; 0000 0044 OCR1AL=0x00;
00007e bdea      	OUT  0x2A,R30
                 ; 0000 0045 OCR1BH=0x00;
00007f bde9      	OUT  0x29,R30
                 ; 0000 0046 OCR1BL=0x00;
000080 bde8      	OUT  0x28,R30
                 ; 0000 0047 ASSR=0x00;
000081 bde2      	OUT  0x22,R30
                 ; 0000 0048 TCCR2=0x00;
000082 bde5      	OUT  0x25,R30
                 ; 0000 0049 TCNT2=0x00;
000083 bde4      	OUT  0x24,R30
                 ; 0000 004A OCR2=0x00;
000084 bde3      	OUT  0x23,R30
                 ; 0000 004B MCUCR=0x00;
000085 bfe5      	OUT  0x35,R30
                 ; 0000 004C MCUCSR=0x00;
000086 bfe4      	OUT  0x34,R30
                 ; 0000 004D TIMSK=0x00;
000087 bfe9      	OUT  0x39,R30
                 ; 0000 004E UCSRB=0x00;
000088 b9ea      	OUT  0xA,R30
                 ; 0000 004F ACSR=0x80;
000089 e8e0      	LDI  R30,LOW(128)
00008a b9e8      	OUT  0x8,R30
                 ; 0000 0050 SFIOR=0x00;
00008b e0e0      	LDI  R30,LOW(0)
00008c bfe0      	OUT  0x30,R30
                 ; 0000 0051 ADMUX=ADC_VREF_TYPE & 0xff;
00008d e6e0      	LDI  R30,LOW(96)
00008e b9e7      	OUT  0x7,R30
                 ; 0000 0052 ADCSRA=0x81;
00008f e8e1      	LDI  R30,LOW(129)
000090 b9e6      	OUT  0x6,R30
                 ; 0000 0053 SFIOR&=0xEF;
000091 b7e0      	IN   R30,0x30
000092 7eef      	ANDI R30,0xEF
000093 bfe0      	OUT  0x30,R30
                 ; 0000 0054 SPCR=0x00;
000094 e0e0      	LDI  R30,LOW(0)
000095 b9ed      	OUT  0xD,R30
                 ; 0000 0055 TWCR=0x00;
000096 bfe6      	OUT  0x36,R30
                 ; 0000 0056 
                 ; 0000 0057 while (1)
                 _0x8:
                 ; 0000 0058       {
                 ; 0000 0059 
                 ; 0000 005A        // Guardar cambio de T
                 ; 0000 005B         if(boton == 0)//detectamos el cero producido por el objeto que obstruye
000097 99b0      	SBIC 0x16,0
000098 c002      	RJMP _0xB
                 ; 0000 005C                 btna=0;
000099 94e8      	CLT
00009a c001      	RJMP _0x50
                 ; 0000 005D             else
                 _0xB:
                 ; 0000 005E                 btna=1;
00009b 9468      	SET
                 _0x50:
00009c f820      	BLD  R2,0
                 ; 0000 005F 
                 ; 0000 0060       if ((btnp==1)&&(btna==0)) //hubo cambio de flanco de 1 a 0
00009d fe21      	SBRS R2,1
00009e c002      	RJMP _0xE
00009f fe20      	SBRS R2,0
0000a0 c001      	RJMP _0xF
                 _0xE:
0000a1 c009      	RJMP _0xD
                 _0xF:
                 ; 0000 0061 
                 ; 0000 0062         {
                 ; 0000 0063            if(far==0){
0000a2 2c04      	MOV  R0,R4
0000a3 2805      	OR   R0,R5
0000a4 f421      	BRNE _0x10
                 ; 0000 0064             far=1;
0000a5 e0e1      	LDI  R30,LOW(1)
0000a6 e0f0      	LDI  R31,HIGH(1)
0000a7 012f      	MOVW R4,R30
                 ; 0000 0065            }else{
0000a8 c002      	RJMP _0x11
                 _0x10:
                 ; 0000 0066             far=0;
0000a9 2444      	CLR  R4
0000aa 2455      	CLR  R5
                 ; 0000 0067            }
                 _0x11:
                 ; 0000 0068         }
                 ; 0000 0069 
                 ; 0000 006A         if ((btnp==0)&&(btna==1)){ //hubo cambio de flanco de 0 a 1
                 _0xD:
                 ; 0000 006B             //delay_ms(40); //Se coloca retardo de 40mS para eliminar rebotes
                 ; 0000 006C             }
                 ; 0000 006D 
                 ; 0000 006E         btnp=btna;
0000ab fa20      	BST  R2,0
0000ac f821      	BLD  R2,1
                 ; 0000 006F         //Para celsius
                 ; 0000 0070         cn=(5.0 * read_adc(0) * 100.0)/255;
0000ad e0a0      	LDI  R26,LOW(0)
0000ae dfaa      	RCALL _read_adc
0000af d05e      	RCALL SUBOPT_0x0
                +
0000b0 e0a0     +LDI R26 , LOW ( 0x40A00000 )
0000b1 e0b0     +LDI R27 , HIGH ( 0x40A00000 )
0000b2 ea80     +LDI R24 , BYTE3 ( 0x40A00000 )
0000b3 e490     +LDI R25 , BYTE4 ( 0x40A00000 )
                 	__GETD2N 0x40A00000
0000b4 d1ad      	RCALL __MULF12
                +
0000b5 e0a0     +LDI R26 , LOW ( 0x42C80000 )
0000b6 e0b0     +LDI R27 , HIGH ( 0x42C80000 )
0000b7 ec88     +LDI R24 , BYTE3 ( 0x42C80000 )
0000b8 e492     +LDI R25 , BYTE4 ( 0x42C80000 )
                 	__GETD2N 0x42C80000
0000b9 d1a8      	RCALL __MULF12
0000ba 01df      	MOVW R26,R30
0000bb 01cb      	MOVW R24,R22
                +
0000bc e0e0     +LDI R30 , LOW ( 0x437F0000 )
0000bd e0f0     +LDI R31 , HIGH ( 0x437F0000 )
0000be e76f     +LDI R22 , BYTE3 ( 0x437F0000 )
0000bf e473     +LDI R23 , BYTE4 ( 0x437F0000 )
                 	__GETD1N 0x437F0000
0000c0 d1ef      	RCALL __DIVF21
0000c1 d0e5      	RCALL __CFD1U
0000c2 2e7e      	MOV  R7,R30
                 ; 0000 0071         centenas=cn/100;
0000c3 2da7      	MOV  R26,R7
0000c4 d04d      	RCALL SUBOPT_0x1
0000c5 2ebe      	MOV  R11,R30
                 ; 0000 0072         decenas=cn/10;
0000c6 2da7      	MOV  R26,R7
0000c7 d04f      	RCALL SUBOPT_0x2
0000c8 2e8e      	MOV  R8,R30
                 ; 0000 0073         unidades=cn%10;
0000c9 2da7      	MOV  R26,R7
0000ca d051      	RCALL SUBOPT_0x3
0000cb 2e9e      	MOV  R9,R30
                 ; 0000 0074         delay_ms(50);
0000cc e3a2      	LDI  R26,LOW(50)
0000cd d053      	RCALL SUBOPT_0x4
                 ; 0000 0075 
                 ; 0000 0076 
                 ; 0000 0077 
                 ; 0000 0078        /* if(cn>=50){
                 ; 0000 0079             cn=50;
                 ; 0000 007A         }*/
                 ; 0000 007B 
                 ; 0000 007C       if(far==1){
0000ce e0e1      	LDI  R30,LOW(1)
0000cf e0f0      	LDI  R31,HIGH(1)
0000d0 15e4      	CP   R30,R4
0000d1 05f5      	CPC  R31,R5
0000d2 f539      	BRNE _0x15
                 ; 0000 007D          f = ((cn*1.8)+32);
0000d3 2de7      	MOV  R30,R7
0000d4 d039      	RCALL SUBOPT_0x0
                +
0000d5 e6a6     +LDI R26 , LOW ( 0x3FE66666 )
0000d6 e6b6     +LDI R27 , HIGH ( 0x3FE66666 )
0000d7 ee86     +LDI R24 , BYTE3 ( 0x3FE66666 )
0000d8 e39f     +LDI R25 , BYTE4 ( 0x3FE66666 )
                 	__GETD2N 0x3FE66666
0000d9 d188      	RCALL __MULF12
                +
0000da e0a0     +LDI R26 , LOW ( 0x42000000 )
0000db e0b0     +LDI R27 , HIGH ( 0x42000000 )
0000dc e080     +LDI R24 , BYTE3 ( 0x42000000 )
0000dd e492     +LDI R25 , BYTE4 ( 0x42000000 )
                 	__GETD2N 0x42000000
0000de d134      	RCALL __ADDF12
0000df d0c7      	RCALL __CFD1U
0000e0 2e6e      	MOV  R6,R30
                 ; 0000 007E 
                 ; 0000 007F          cen=f/100;
0000e1 2da6      	MOV  R26,R6
0000e2 d02f      	RCALL SUBOPT_0x1
0000e3 2ece      	MOV  R12,R30
                 ; 0000 0080          dec=f/10;
0000e4 2da6      	MOV  R26,R6
0000e5 d031      	RCALL SUBOPT_0x2
0000e6 2ede      	MOV  R13,R30
                 ; 0000 0081          uni=f%10;
0000e7 2da6      	MOV  R26,R6
0000e8 d033      	RCALL SUBOPT_0x3
0000e9 2eae      	MOV  R10,R30
                 ; 0000 0082 
                 ; 0000 0083          PORTC=letra[1];
                +
0000ea 91e0 00eb+LDS R30 , _letra + ( 1 )
                 	__GETB1MN _letra,1
0000ec d036      	RCALL SUBOPT_0x5
                 ; 0000 0084 
                 ; 0000 0085          C0=0;
                 ; 0000 0086          C1=0;
                 ; 0000 0087          C2=0;
0000ed 9892      	CBI  0x12,2
                 ; 0000 0088          C3=1;
0000ee 9a93      	SBI  0x12,3
                 ; 0000 0089          delay_ms(1);
0000ef d037      	RCALL SUBOPT_0x6
                 ; 0000 008A 
                 ; 0000 008B         PORTC=tabla7segmentos[uni];//unidades
0000f0 2dea      	MOV  R30,R10
0000f1 d037      	RCALL SUBOPT_0x7
0000f2 d030      	RCALL SUBOPT_0x5
                 ; 0000 008C 
                 ; 0000 008D         C0=0;
                 ; 0000 008E         C1=0;
                 ; 0000 008F         C2=1;
0000f3 9a92      	SBI  0x12,2
                 ; 0000 0090         C3=0;
0000f4 d039      	RCALL SUBOPT_0x8
                 ; 0000 0091 
                 ; 0000 0092         delay_ms(1);
                 ; 0000 0093          //delay_ms(5);
                 ; 0000 0094 
                 ; 0000 0095 
                 ; 0000 0096         PORTC=tabla7segmentos[dec];//decenas
0000f5 2ded      	MOV  R30,R13
0000f6 d032      	RCALL SUBOPT_0x7
0000f7 d038      	RCALL SUBOPT_0x9
                 ; 0000 0097         C0=0;
                 ; 0000 0098         C1=1;
                 ; 0000 0099         C2=0;
                 ; 0000 009A         C3=0;
                 ; 0000 009B         delay_ms(1);
                 ; 0000 009C          //delay_ms(5);
                 ; 0000 009D 
                 ; 0000 009E 
                 ; 0000 009F         PORTC=tabla7segmentos[cen];//centenas
0000f8 2dec      	MOV  R30,R12
0000f9 c009      	RJMP _0x51
                 ; 0000 00A0         C0=1;
                 ; 0000 00A1         C1=0;
                 ; 0000 00A2         C2=0;
                 ; 0000 00A3         C3=0;
                 ; 0000 00A4         delay_ms(1);
                 ; 0000 00A5          //delay_ms(50);
                 ; 0000 00A6 
                 ; 0000 00A7       }else{ //CELSIUS
                 _0x15:
                 ; 0000 00A8 
                 ; 0000 00A9          PORTC=letra[0];
0000fa 91e0 00ea 	LDS  R30,_letra
0000fc d026      	RCALL SUBOPT_0x5
                 ; 0000 00AA          C0=0;
                 ; 0000 00AB          C1=0;
                 ; 0000 00AC          C2=1;
0000fd 9a92      	SBI  0x12,2
                 ; 0000 00AD          C3=0;
0000fe d02f      	RCALL SUBOPT_0x8
                 ; 0000 00AE          delay_ms(1);
                 ; 0000 00AF 
                 ; 0000 00B0 
                 ; 0000 00B1 
                 ; 0000 00B2          PORTC=tabla7segmentos[unidades];
0000ff 2de9      	MOV  R30,R9
000100 d028      	RCALL SUBOPT_0x7
000101 d02e      	RCALL SUBOPT_0x9
                 ; 0000 00B3          C0=0;
                 ; 0000 00B4          C1=1;
                 ; 0000 00B5          C2=0;
                 ; 0000 00B6          C3=0;
                 ; 0000 00B7          delay_ms(1);
                 ; 0000 00B8          //delay_ms(50);
                 ; 0000 00B9 
                 ; 0000 00BA 
                 ; 0000 00BB         PORTC=tabla7segmentos[decenas];
000102 2de8      	MOV  R30,R8
                 _0x51:
000103 e0f0      	LDI  R31,0
000104 52e0      	SUBI R30,LOW(-_tabla7segmentos)
000105 4fff      	SBCI R31,HIGH(-_tabla7segmentos)
000106 81e0      	LD   R30,Z
000107 bbe5      	OUT  0x15,R30
                 ; 0000 00BC         C0=1;
000108 9a90      	SBI  0x12,0
                 ; 0000 00BD         C1=0;
000109 9891      	CBI  0x12,1
                 ; 0000 00BE         C2=0;
00010a 9892      	CBI  0x12,2
                 ; 0000 00BF         C3=0;
00010b d022      	RCALL SUBOPT_0x8
                 ; 0000 00C0         delay_ms(1);
                 ; 0000 00C1          //delay_ms(50);
                 ; 0000 00C2       }
                 ; 0000 00C3 
                 ; 0000 00C4 
                 ; 0000 00C5 
                 ; 0000 00C6       }
00010c cf8a      	RJMP _0x8
                 ; 0000 00C7 }
                 _0x4F:
00010d cfff      	RJMP _0x4F
                 ; .FEND
                 
                 	.DSEG
                 _tabla7segmentos:
0000e0           	.BYTE 0xA
                 _letra:
0000ea           	.BYTE 0x2
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
00010e e0f0      	LDI  R31,0
00010f d031      	RCALL __CWD1
000110 d0cf      	RCALL __CDF1
000111 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000112 e0b0      	LDI  R27,0
000113 e6e4      	LDI  R30,LOW(100)
000114 e0f0      	LDI  R31,HIGH(100)
000115 d043      	RCALL __DIVW21
000116 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
000117 e0b0      	LDI  R27,0
000118 e0ea      	LDI  R30,LOW(10)
000119 e0f0      	LDI  R31,HIGH(10)
00011a d03e      	RCALL __DIVW21
00011b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
00011c 27bb      	CLR  R27
00011d e0ea      	LDI  R30,LOW(10)
00011e e0f0      	LDI  R31,HIGH(10)
00011f d03e      	RCALL __MODW21
000120 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x4:
000121 e0b0      	LDI  R27,0
000122 c1d1      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x5:
000123 bbe5      	OUT  0x15,R30
000124 9890      	CBI  0x12,0
000125 9891      	CBI  0x12,1
000126 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6:
000127 e0a1      	LDI  R26,LOW(1)
000128 cff8      	RJMP SUBOPT_0x4
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x7:
000129 e0f0      	LDI  R31,0
00012a 52e0      	SUBI R30,LOW(-_tabla7segmentos)
00012b 4fff      	SBCI R31,HIGH(-_tabla7segmentos)
00012c 81e0      	LD   R30,Z
00012d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x8:
00012e 9893      	CBI  0x12,3
00012f cff7      	RJMP SUBOPT_0x6
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x9:
000130 bbe5      	OUT  0x15,R30
000131 9890      	CBI  0x12,0
000132 9a91      	SBI  0x12,1
000133 9892      	CBI  0x12,2
000134 cff9      	RJMP SUBOPT_0x8
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __ANEGW1:
000135 95f1      	NEG  R31
000136 95e1      	NEG  R30
000137 40f0      	SBCI R31,0
000138 9508      	RET
                 
                 __ANEGD1:
000139 95f0      	COM  R31
00013a 9560      	COM  R22
00013b 9570      	COM  R23
00013c 95e1      	NEG  R30
00013d 4fff      	SBCI R31,-1
00013e 4f6f      	SBCI R22,-1
00013f 4f7f      	SBCI R23,-1
000140 9508      	RET
                 
                 __CWD1:
000141 2f6f      	MOV  R22,R31
000142 0f66      	ADD  R22,R22
000143 0b66      	SBC  R22,R22
000144 2f76      	MOV  R23,R22
000145 9508      	RET
                 
                 __DIVW21U:
000146 2400      	CLR  R0
000147 2411      	CLR  R1
000148 e190      	LDI  R25,16
                 __DIVW21U1:
000149 0faa      	LSL  R26
00014a 1fbb      	ROL  R27
00014b 1c00      	ROL  R0
00014c 1c11      	ROL  R1
00014d 1a0e      	SUB  R0,R30
00014e 0a1f      	SBC  R1,R31
00014f f418      	BRCC __DIVW21U2
000150 0e0e      	ADD  R0,R30
000151 1e1f      	ADC  R1,R31
000152 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000153 60a1      	SBR  R26,1
                 __DIVW21U3:
000154 959a      	DEC  R25
000155 f799      	BRNE __DIVW21U1
000156 01fd      	MOVW R30,R26
000157 01d0      	MOVW R26,R0
000158 9508      	RET
                 
                 __DIVW21:
000159 d012      	RCALL __CHKSIGNW
00015a dfeb      	RCALL __DIVW21U
00015b f40e      	BRTC __DIVW211
00015c dfd8      	RCALL __ANEGW1
                 __DIVW211:
00015d 9508      	RET
                 
                 __MODW21:
00015e 94e8      	CLT
00015f ffb7      	SBRS R27,7
000160 c004      	RJMP __MODW211
000161 95b1      	NEG  R27
000162 95a1      	NEG  R26
000163 40b0      	SBCI R27,0
000164 9468      	SET
                 __MODW211:
000165 fdf7      	SBRC R31,7
000166 dfce      	RCALL __ANEGW1
000167 dfde      	RCALL __DIVW21U
000168 01fd      	MOVW R30,R26
000169 f40e      	BRTC __MODW212
00016a dfca      	RCALL __ANEGW1
                 __MODW212:
00016b 9508      	RET
                 
                 __CHKSIGNW:
00016c 94e8      	CLT
00016d fff7      	SBRS R31,7
00016e c002      	RJMP __CHKSW1
00016f dfc5      	RCALL __ANEGW1
000170 9468      	SET
                 __CHKSW1:
000171 ffb7      	SBRS R27,7
000172 c006      	RJMP __CHKSW2
000173 95b1      	NEG  R27
000174 95a1      	NEG  R26
000175 40b0      	SBCI R27,0
000176 f800      	BLD  R0,0
000177 9403      	INC  R0
000178 fa00      	BST  R0,0
                 __CHKSW2:
000179 9508      	RET
                 
                 __ROUND_REPACK:
00017a 2355      	TST  R21
00017b f442      	BRPL __REPACK
00017c 3850      	CPI  R21,0x80
00017d f411      	BRNE __ROUND_REPACK0
00017e ffe0      	SBRS R30,0
00017f c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000180 9631      	ADIW R30,1
000181 1f69      	ADC  R22,R25
000182 1f79      	ADC  R23,R25
000183 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000184 e850      	LDI  R21,0x80
000185 2757      	EOR  R21,R23
000186 f411      	BRNE __REPACK0
000187 935f      	PUSH R21
000188 c0c8      	RJMP __ZERORES
                 __REPACK0:
000189 3f5f      	CPI  R21,0xFF
00018a f031      	BREQ __REPACK1
00018b 0f66      	LSL  R22
00018c 0c00      	LSL  R0
00018d 9557      	ROR  R21
00018e 9567      	ROR  R22
00018f 2f75      	MOV  R23,R21
000190 9508      	RET
                 __REPACK1:
000191 935f      	PUSH R21
000192 2000      	TST  R0
000193 f00a      	BRMI __REPACK2
000194 c0c7      	RJMP __MAXRES
                 __REPACK2:
000195 c0c0      	RJMP __MINRES
                 
                 __UNPACK:
000196 e850      	LDI  R21,0x80
000197 2e19      	MOV  R1,R25
000198 2215      	AND  R1,R21
000199 0f88      	LSL  R24
00019a 1f99      	ROL  R25
00019b 2795      	EOR  R25,R21
00019c 0f55      	LSL  R21
00019d 9587      	ROR  R24
                 
                 __UNPACK1:
00019e e850      	LDI  R21,0x80
00019f 2e07      	MOV  R0,R23
0001a0 2205      	AND  R0,R21
0001a1 0f66      	LSL  R22
0001a2 1f77      	ROL  R23
0001a3 2775      	EOR  R23,R21
0001a4 0f55      	LSL  R21
0001a5 9567      	ROR  R22
0001a6 9508      	RET
                 
                 __CFD1U:
0001a7 9468      	SET
0001a8 c001      	RJMP __CFD1U0
                 __CFD1:
0001a9 94e8      	CLT
                 __CFD1U0:
0001aa 935f      	PUSH R21
0001ab dff2      	RCALL __UNPACK1
0001ac 3870      	CPI  R23,0x80
0001ad f018      	BRLO __CFD10
0001ae 3f7f      	CPI  R23,0xFF
0001af f408      	BRCC __CFD10
0001b0 c0a0      	RJMP __ZERORES
                 __CFD10:
0001b1 e156      	LDI  R21,22
0001b2 1b57      	SUB  R21,R23
0001b3 f4aa      	BRPL __CFD11
0001b4 9551      	NEG  R21
0001b5 3058      	CPI  R21,8
0001b6 f40e      	BRTC __CFD19
0001b7 3059      	CPI  R21,9
                 __CFD19:
0001b8 f030      	BRLO __CFD17
0001b9 efef      	SER  R30
0001ba efff      	SER  R31
0001bb ef6f      	SER  R22
0001bc e77f      	LDI  R23,0x7F
0001bd f977      	BLD  R23,7
0001be c01a      	RJMP __CFD15
                 __CFD17:
0001bf 2777      	CLR  R23
0001c0 2355      	TST  R21
0001c1 f0b9      	BREQ __CFD15
                 __CFD18:
0001c2 0fee      	LSL  R30
0001c3 1fff      	ROL  R31
0001c4 1f66      	ROL  R22
0001c5 1f77      	ROL  R23
0001c6 955a      	DEC  R21
0001c7 f7d1      	BRNE __CFD18
0001c8 c010      	RJMP __CFD15
                 __CFD11:
0001c9 2777      	CLR  R23
                 __CFD12:
0001ca 3058      	CPI  R21,8
0001cb f028      	BRLO __CFD13
0001cc 2fef      	MOV  R30,R31
0001cd 2ff6      	MOV  R31,R22
0001ce 2f67      	MOV  R22,R23
0001cf 5058      	SUBI R21,8
0001d0 cff9      	RJMP __CFD12
                 __CFD13:
0001d1 2355      	TST  R21
0001d2 f031      	BREQ __CFD15
                 __CFD14:
0001d3 9576      	LSR  R23
0001d4 9567      	ROR  R22
0001d5 95f7      	ROR  R31
0001d6 95e7      	ROR  R30
0001d7 955a      	DEC  R21
0001d8 f7d1      	BRNE __CFD14
                 __CFD15:
0001d9 2000      	TST  R0
0001da f40a      	BRPL __CFD16
0001db df5d      	RCALL __ANEGD1
                 __CFD16:
0001dc 915f      	POP  R21
0001dd 9508      	RET
                 
                 __CDF1U:
0001de 9468      	SET
0001df c001      	RJMP __CDF1U0
                 __CDF1:
0001e0 94e8      	CLT
                 __CDF1U0:
0001e1 9730      	SBIW R30,0
0001e2 4060      	SBCI R22,0
0001e3 4070      	SBCI R23,0
0001e4 f0b1      	BREQ __CDF10
0001e5 2400      	CLR  R0
0001e6 f026      	BRTS __CDF11
0001e7 2377      	TST  R23
0001e8 f412      	BRPL __CDF11
0001e9 9400      	COM  R0
0001ea df4e      	RCALL __ANEGD1
                 __CDF11:
0001eb 2e17      	MOV  R1,R23
0001ec e17e      	LDI  R23,30
0001ed 2011      	TST  R1
                 __CDF12:
0001ee f032      	BRMI __CDF13
0001ef 957a      	DEC  R23
0001f0 0fee      	LSL  R30
0001f1 1fff      	ROL  R31
0001f2 1f66      	ROL  R22
0001f3 1c11      	ROL  R1
0001f4 cff9      	RJMP __CDF12
                 __CDF13:
0001f5 2fef      	MOV  R30,R31
0001f6 2ff6      	MOV  R31,R22
0001f7 2d61      	MOV  R22,R1
0001f8 935f      	PUSH R21
0001f9 df8a      	RCALL __REPACK
0001fa 915f      	POP  R21
                 __CDF10:
0001fb 9508      	RET
                 
                 __SWAPACC:
0001fc 934f      	PUSH R20
0001fd 01af      	MOVW R20,R30
0001fe 01fd      	MOVW R30,R26
0001ff 01da      	MOVW R26,R20
000200 01ab      	MOVW R20,R22
000201 01bc      	MOVW R22,R24
000202 01ca      	MOVW R24,R20
000203 2d40      	MOV  R20,R0
000204 2c01      	MOV  R0,R1
000205 2e14      	MOV  R1,R20
000206 914f      	POP  R20
000207 9508      	RET
                 
                 __UADD12:
000208 0fea      	ADD  R30,R26
000209 1ffb      	ADC  R31,R27
00020a 1f68      	ADC  R22,R24
00020b 9508      	RET
                 
                 __NEGMAN1:
00020c 95e0      	COM  R30
00020d 95f0      	COM  R31
00020e 9560      	COM  R22
00020f 5fef      	SUBI R30,-1
000210 4fff      	SBCI R31,-1
000211 4f6f      	SBCI R22,-1
000212 9508      	RET
                 
                 __ADDF12:
000213 935f      	PUSH R21
000214 df81      	RCALL __UNPACK
000215 3890      	CPI  R25,0x80
000216 f139      	BREQ __ADDF129
                 
                 __ADDF120:
000217 3870      	CPI  R23,0x80
000218 f121      	BREQ __ADDF128
                 __ADDF121:
000219 2f57      	MOV  R21,R23
00021a 1b59      	SUB  R21,R25
00021b f12b      	BRVS __ADDF1211
00021c f412      	BRPL __ADDF122
00021d dfde      	RCALL __SWAPACC
00021e cffa      	RJMP __ADDF121
                 __ADDF122:
00021f 3158      	CPI  R21,24
000220 f018      	BRLO __ADDF123
000221 27aa      	CLR  R26
000222 27bb      	CLR  R27
000223 2788      	CLR  R24
                 __ADDF123:
000224 3058      	CPI  R21,8
000225 f028      	BRLO __ADDF124
000226 2fab      	MOV  R26,R27
000227 2fb8      	MOV  R27,R24
000228 2788      	CLR  R24
000229 5058      	SUBI R21,8
00022a cff9      	RJMP __ADDF123
                 __ADDF124:
00022b 2355      	TST  R21
00022c f029      	BREQ __ADDF126
                 __ADDF125:
00022d 9586      	LSR  R24
00022e 95b7      	ROR  R27
00022f 95a7      	ROR  R26
000230 955a      	DEC  R21
000231 f7d9      	BRNE __ADDF125
                 __ADDF126:
000232 2d50      	MOV  R21,R0
000233 2551      	EOR  R21,R1
000234 f072      	BRMI __ADDF127
000235 dfd2      	RCALL __UADD12
000236 f438      	BRCC __ADDF129
000237 9567      	ROR  R22
000238 95f7      	ROR  R31
000239 95e7      	ROR  R30
00023a 9573      	INC  R23
00023b f413      	BRVC __ADDF129
00023c c01f      	RJMP __MAXRES
                 __ADDF128:
00023d dfbe      	RCALL __SWAPACC
                 __ADDF129:
00023e df45      	RCALL __REPACK
00023f 915f      	POP  R21
000240 9508      	RET
                 __ADDF1211:
000241 f7d8      	BRCC __ADDF128
000242 cffb      	RJMP __ADDF129
                 __ADDF127:
000243 1bea      	SUB  R30,R26
000244 0bfb      	SBC  R31,R27
000245 0b68      	SBC  R22,R24
000246 f051      	BREQ __ZERORES
000247 f410      	BRCC __ADDF1210
000248 9400      	COM  R0
000249 dfc2      	RCALL __NEGMAN1
                 __ADDF1210:
00024a 2366      	TST  R22
00024b f392      	BRMI __ADDF129
00024c 0fee      	LSL  R30
00024d 1fff      	ROL  R31
00024e 1f66      	ROL  R22
00024f 957a      	DEC  R23
000250 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
000251 27ee      	CLR  R30
000252 27ff      	CLR  R31
000253 01bf      	MOVW R22,R30
000254 915f      	POP  R21
000255 9508      	RET
                 
                 __MINRES:
000256 efef      	SER  R30
000257 efff      	SER  R31
000258 e76f      	LDI  R22,0x7F
000259 ef7f      	SER  R23
00025a 915f      	POP  R21
00025b 9508      	RET
                 
                 __MAXRES:
00025c efef      	SER  R30
00025d efff      	SER  R31
00025e e76f      	LDI  R22,0x7F
00025f e77f      	LDI  R23,0x7F
000260 915f      	POP  R21
000261 9508      	RET
                 
                 __MULF12:
000262 935f      	PUSH R21
000263 df32      	RCALL __UNPACK
000264 3870      	CPI  R23,0x80
000265 f359      	BREQ __ZERORES
000266 3890      	CPI  R25,0x80
000267 f349      	BREQ __ZERORES
000268 2401      	EOR  R0,R1
000269 9408      	SEC
00026a 1f79      	ADC  R23,R25
00026b f423      	BRVC __MULF124
00026c f324      	BRLT __ZERORES
                 __MULF125:
00026d 2000      	TST  R0
00026e f33a      	BRMI __MINRES
00026f cfec      	RJMP __MAXRES
                 __MULF124:
000270 920f      	PUSH R0
000271 931f      	PUSH R17
000272 932f      	PUSH R18
000273 933f      	PUSH R19
000274 934f      	PUSH R20
000275 2711      	CLR  R17
000276 2722      	CLR  R18
000277 2799      	CLR  R25
000278 9f68      	MUL  R22,R24
000279 01a0      	MOVW R20,R0
00027a 9f8f      	MUL  R24,R31
00027b 2d30      	MOV  R19,R0
00027c 0d41      	ADD  R20,R1
00027d 1f59      	ADC  R21,R25
00027e 9f6b      	MUL  R22,R27
00027f 0d30      	ADD  R19,R0
000280 1d41      	ADC  R20,R1
000281 1f59      	ADC  R21,R25
000282 9f8e      	MUL  R24,R30
000283 d027      	RCALL __MULF126
000284 9fbf      	MUL  R27,R31
000285 d025      	RCALL __MULF126
000286 9f6a      	MUL  R22,R26
000287 d023      	RCALL __MULF126
000288 9fbe      	MUL  R27,R30
000289 d01d      	RCALL __MULF127
00028a 9faf      	MUL  R26,R31
00028b d01b      	RCALL __MULF127
00028c 9fae      	MUL  R26,R30
00028d 0d11      	ADD  R17,R1
00028e 1f29      	ADC  R18,R25
00028f 1f39      	ADC  R19,R25
000290 1f49      	ADC  R20,R25
000291 1f59      	ADC  R21,R25
000292 2fe3      	MOV  R30,R19
000293 2ff4      	MOV  R31,R20
000294 2f65      	MOV  R22,R21
000295 2f52      	MOV  R21,R18
000296 914f      	POP  R20
000297 913f      	POP  R19
000298 912f      	POP  R18
000299 911f      	POP  R17
00029a 900f      	POP  R0
00029b 2366      	TST  R22
00029c f02a      	BRMI __MULF122
00029d 0f55      	LSL  R21
00029e 1fee      	ROL  R30
00029f 1fff      	ROL  R31
0002a0 1f66      	ROL  R22
0002a1 c002      	RJMP __MULF123
                 __MULF122:
0002a2 9573      	INC  R23
0002a3 f24b      	BRVS __MULF125
                 __MULF123:
0002a4 ded5      	RCALL __ROUND_REPACK
0002a5 915f      	POP  R21
0002a6 9508      	RET
                 
                 __MULF127:
0002a7 0d10      	ADD  R17,R0
0002a8 1d21      	ADC  R18,R1
0002a9 1f39      	ADC  R19,R25
0002aa c002      	RJMP __MULF128
                 __MULF126:
0002ab 0d20      	ADD  R18,R0
0002ac 1d31      	ADC  R19,R1
                 __MULF128:
0002ad 1f49      	ADC  R20,R25
0002ae 1f59      	ADC  R21,R25
0002af 9508      	RET
                 
                 __DIVF21:
0002b0 935f      	PUSH R21
0002b1 dee4      	RCALL __UNPACK
0002b2 3870      	CPI  R23,0x80
0002b3 f421      	BRNE __DIVF210
0002b4 2011      	TST  R1
                 __DIVF211:
0002b5 f40a      	BRPL __DIVF219
0002b6 cf9f      	RJMP __MINRES
                 __DIVF219:
0002b7 cfa4      	RJMP __MAXRES
                 __DIVF210:
0002b8 3890      	CPI  R25,0x80
0002b9 f409      	BRNE __DIVF218
                 __DIVF217:
0002ba cf96      	RJMP __ZERORES
                 __DIVF218:
0002bb 2401      	EOR  R0,R1
0002bc 9408      	SEC
0002bd 0b97      	SBC  R25,R23
0002be f41b      	BRVC __DIVF216
0002bf f3d4      	BRLT __DIVF217
0002c0 2000      	TST  R0
0002c1 cff3      	RJMP __DIVF211
                 __DIVF216:
0002c2 2f79      	MOV  R23,R25
0002c3 931f      	PUSH R17
0002c4 932f      	PUSH R18
0002c5 933f      	PUSH R19
0002c6 934f      	PUSH R20
0002c7 2411      	CLR  R1
0002c8 2711      	CLR  R17
0002c9 2722      	CLR  R18
0002ca 2733      	CLR  R19
0002cb 01a9      	MOVW R20,R18
0002cc e290      	LDI  R25,32
                 __DIVF212:
0002cd 17ae      	CP   R26,R30
0002ce 07bf      	CPC  R27,R31
0002cf 0786      	CPC  R24,R22
0002d0 0741      	CPC  R20,R17
0002d1 f030      	BRLO __DIVF213
0002d2 1bae      	SUB  R26,R30
0002d3 0bbf      	SBC  R27,R31
0002d4 0b86      	SBC  R24,R22
0002d5 0b41      	SBC  R20,R17
0002d6 9408      	SEC
0002d7 c001      	RJMP __DIVF214
                 __DIVF213:
0002d8 9488      	CLC
                 __DIVF214:
0002d9 1f55      	ROL  R21
0002da 1f22      	ROL  R18
0002db 1f33      	ROL  R19
0002dc 1c11      	ROL  R1
0002dd 1faa      	ROL  R26
0002de 1fbb      	ROL  R27
0002df 1f88      	ROL  R24
0002e0 1f44      	ROL  R20
0002e1 959a      	DEC  R25
0002e2 f751      	BRNE __DIVF212
0002e3 01f9      	MOVW R30,R18
0002e4 2d61      	MOV  R22,R1
0002e5 914f      	POP  R20
0002e6 913f      	POP  R19
0002e7 912f      	POP  R18
0002e8 911f      	POP  R17
0002e9 2366      	TST  R22
0002ea f032      	BRMI __DIVF215
0002eb 0f55      	LSL  R21
0002ec 1fee      	ROL  R30
0002ed 1fff      	ROL  R31
0002ee 1f66      	ROL  R22
0002ef 957a      	DEC  R23
0002f0 f24b      	BRVS __DIVF217
                 __DIVF215:
0002f1 de88      	RCALL __ROUND_REPACK
0002f2 915f      	POP  R21
0002f3 9508      	RET
                 
                 _delay_ms:
0002f4 9610      	adiw r26,0
0002f5 f039      	breq __delay_ms1
                 __delay_ms0:
0002f6 95a8      	wdr
                +
0002f7 ef8a     +LDI R24 , LOW ( 0xFA )
0002f8 e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
0002f9 9701     +SBIW R24 , 1
0002fa f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
0002fb 9711      	sbiw r26,1
0002fc f7c9      	brne __delay_ms0
                 __delay_ms1:
0002fd 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8535L register use summary:
r0 :  36 r1 :  25 r2 :   5 r3 :   0 r4 :   4 r5 :   3 r6 :   4 r7 :   5 
r8 :   2 r9 :   2 r10:   2 r11:   1 r12:   2 r13:   2 r14:   0 r15:   0 
r16:   0 r17:  10 r18:  13 r19:  12 r20:  22 r21:  59 r22:  49 r23:  38 
r24:  32 r25:  33 r26:  40 r27:  29 r28:   2 r29:   1 r30: 135 r31:  51 
x  :   3 y  :   2 z  :   9 
Registers used: 31 out of 35 (88.6%)

ATmega8535L instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  18 add   :   8 
adiw  :   3 and   :   2 andi  :   1 asr   :   0 bclr  :   0 bld   :   4 
brbc  :   0 brbs  :   0 brcc  :   5 brcs  :   0 break :   0 breq  :  12 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   6 
brlt  :   2 brmi  :   7 brne  :  17 brpl  :   6 brsh  :   0 brtc  :   3 
brts  :   1 brvc  :   4 brvs  :   4 bset  :   0 bst   :   2 cbi   :   8 
cbr   :   0 clc   :   1 clh   :   0 cli   :   1 cln   :   0 clr   :  23 
cls   :   0 clt   :   5 clv   :   0 clz   :   0 com   :   8 cp    :   2 
cpc   :   4 cpi   :  15 cpse  :   0 dec   :  10 des   :   0 eor   :   6 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   2 
inc   :   3 ld    :   3 ldd   :   0 ldi   :  76 lds   :   2 lpm   :   7 
lsl   :  12 lsr   :   2 mov   :  47 movw  :  19 mul   :   9 muls  :   0 
mulsu :   0 neg   :   8 nop   :   0 or    :   1 ori   :   1 out   :  48 
pop   :  18 push  :  17 rcall :  60 ret   :  29 reti  :   0 rjmp  :  64 
rol   :  27 ror   :  12 sbc   :   8 sbci  :  12 sbi   :   7 sbic  :   1 
sbis  :   1 sbiw  :   6 sbr   :   1 sbrc  :   1 sbrs  :   6 sec   :   3 
seh   :   0 sei   :   0 sen   :   0 ser   :   8 ses   :   0 set   :   5 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :   4 std   :   0 
sts   :   0 sub   :   5 subi  :   5 swap  :   0 tst   :  14 wdr   :   1 

Instructions used: 68 out of 114 (59.6%)

ATmega8535L memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0005fc   1490     42   1532    8192  18.7%
[.dseg] 0x000060 0x0000ec      0     12     12     512   2.3%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 10 warnings
